-- ‡πÇ‡∏´‡∏•‡∏î Fluent Library ‡πÅ‡∏•‡∏∞ Addons
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Fluent
local Window = Fluent:CreateWindow({
    Title = "Bovibezs Hub " .. Fluent.Version,
    SubTitle = "by boss",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Green",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ó‡πá‡∏ö Quest ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ User (‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô User)
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Mics = Window:AddTab({ Title = "Mics", Icon = "star" }),
    Storage = Window:AddTab({ Title = "Storage", Icon = "box" }),
    Quest = Window:AddTab({ Title = "Quest", Icon = "upload" }), -- üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ó‡πá‡∏ö Quest ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    User = Window:AddTab({ Title = "User", Icon = "user" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

-- ‚úÖ GUI ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Jotaro
local messageGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
messageGui.Name = "JotaroAlertGui"
messageGui.ResetOnSpawn = false

local alertLabel = Instance.new("TextLabel", messageGui)
alertLabel.Size = UDim2.new(0.5, 0, 0.1, 0)
alertLabel.Position = UDim2.new(0.25, 0, 0.05, 0)
alertLabel.BackgroundTransparency = 0.3
alertLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
alertLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
alertLabel.Font = Enum.Font.GothamBold
alertLabel.TextScaled = true
alertLabel.Visible = false

local function ShowAlert(text)
    alertLabel.Text = text
    alertLabel.Visible = true
    task.wait(3)
    alertLabel.Visible = false
end

local JotaroSpawned = game:GetService("Lighting"):WaitForChild("Values"):WaitForChild("JotaroSpawned")
JotaroSpawned.Changed:Connect(function()
    ShowAlert(JotaroSpawned.Value and "Jotaro Spawned" or "Jotaro Despawned")
end)
if JotaroSpawned.Value then ShowAlert("Jotaro Spawned") end

-- ‚úÖ Auto Collect
local autoCollectConnection = nil
local AutoCollectToggle = Tabs.Main:AddToggle("AutoCollect", {
    Title = "Auto Collect",
    Default = false
})
local function collectTool(tool)
    local character = player.Character or player.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")
    if tool:IsA("Tool") or tool:IsA("Model") then
        if tool:FindFirstChild("Handle") then
            hrp.CFrame = tool.Handle.CFrame + Vector3.new(0, 2, 0)
            task.wait(0.3)
        end
    end
end
AutoCollectToggle:OnChanged(function(enabled)
    if enabled then
        autoCollectConnection = RunService.Heartbeat:Connect(function()
            for _, item in pairs(workspace:WaitForChild("Tools"):GetChildren()) do
                if not AutoCollectToggle.Value then break end
                collectTool(item)
                task.wait(0.5)
            end
        end)
    else
        if autoCollectConnection then
            autoCollectConnection:Disconnect()
            autoCollectConnection = nil
        end
    end
end)

-- ‚úÖ Auto Use: Money Stack / Dios Bone (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô) - ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö Mics
local autoUseConnection = nil
local AutoUseMoneyStackToggle = Tabs.Mics:AddToggle("AutoUseMoneyStack", {
    Title = "Auto Use: Money Stack",
    Default = false
})
local AutoUseDiosBoneToggle = Tabs.Mics:AddToggle("AutoUseDiosBone", {
    Title = "Auto Use: Dios Bone",
    Default = false
})
local function useItem(itemName)
    local backpack = player:WaitForChild("Backpack")
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name == itemName then
            player.Character.Humanoid:EquipTool(tool)
            if tool:FindFirstChild("Handle") then
                tool:Activate()
                break
            end
        end
    end
end
AutoUseMoneyStackToggle:OnChanged(function(state)
    if state then
        autoUseConnection = RunService.Heartbeat:Connect(function()
            useItem("Money Stack")
        end)
    elseif autoUseConnection then
        autoUseConnection:Disconnect()
        autoUseConnection = nil
    end
end)
AutoUseDiosBoneToggle:OnChanged(function(state)
    if state then
        autoUseConnection = RunService.Heartbeat:Connect(function()
            useItem("Dios Bone")
        end)
    elseif autoUseConnection then
        autoUseConnection:Disconnect()
        autoUseConnection = nil
    end
end)

-- ‚úÖ Auto Teleport & Interact (Jotaro) with 4 min Cooldown
local autoJotaroConnection = nil
local AutoJotaroToggle = Tabs.Main:AddToggle("AutoJotaro", {
    Title = "Auto Teleport & Interact (Jotaro)",
    Default = false
})

local lastInteractTime = 0 -- ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
local cooldownTime = 240 -- 4 ‡∏ô‡∏≤‡∏ó‡∏µ (240 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

local function autoJotaro()
    local currentTime = tick()
    if currentTime - lastInteractTime < cooldownTime then return end

    local character = player.Character or player.CharacterAdded:Wait()
    local hrp = character:FindFirstChild("HumanoidRootPart")
    local jotaroModel = workspace:FindFirstChild("NPCs") and workspace.NPCs:FindFirstChild("Jotaro")

    if jotaroModel and jotaroModel:FindFirstChild("HumanoidRootPart") and hrp then
        hrp.CFrame = jotaroModel.HumanoidRootPart.CFrame + Vector3.new(0, 2, 0)

        local prompt = jotaroModel:FindFirstChildWhichIsA("ProximityPrompt", true)
        if prompt then
            fireproximityprompt(prompt)
            lastInteractTime = currentTime -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        end
    end
end

AutoJotaroToggle:OnChanged(function(state)
    if state then
        autoJotaroConnection = RunService.Heartbeat:Connect(autoJotaro)
    elseif autoJotaroConnection then
        autoJotaroConnection:Disconnect()
        autoJotaroConnection = nil
    end
end)


-- ‚úÖ Auto ItemBank: Golden Egg (‡πÅ‡∏ó‡πá‡∏ö Storage)
local AutoBankGoldenEggToggle = Tabs.Storage:AddToggle("AutoBankGoldenEgg", {
    Title = "Auto ItemBank: Golden Egg",
    Default = false
})
local BankSlotDropdown = Tabs.Storage:AddDropdown("GoldenEggBankSlot", {
    Title = "Keep To Storage Golden Egg",
    Values = {"1", "2", "3", "4", "5", "6"},
    Multi = false,
    Default = "1"
})
local selectedBankSlot = "1"
BankSlotDropdown:OnChanged(function(value)
    selectedBankSlot = value
end)

local storedGoldenEggs = {}
local function sendGoldenEggToBank()
    local backpack = player:WaitForChild("Backpack")
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name == "Golden Egg" then
            if not storedGoldenEggs[tool] then
                player.Character.Humanoid:EquipTool(tool)
                task.wait(0.2)
                local success, err = pcall(function()
                    game:GetService("ReplicatedStorage"):WaitForChild("Main")
                        :WaitForChild("Shop"):WaitForChild("ItemBank"):FireServer(selectedBankSlot)
                end)
                if success then
                    print("‚úÖ Golden Egg ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ ItemBank ‡∏ä‡πà‡∏≠‡∏á " .. selectedBankSlot)
                    storedGoldenEggs[tool] = true
                else
                    warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á Golden Egg ‡πÑ‡∏î‡πâ: ", err)
                end
                break
            else
                print("‚úÖ Golden Egg ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô ItemBank")
            end
        end
    end
end
local function onBackpackChildAdded(child)
    if AutoBankGoldenEggToggle.Value and child:IsA("Tool") and child.Name == "Golden Egg" then
        task.wait(0.5)
        sendGoldenEggToBank()
    end
end
AutoBankGoldenEggToggle:OnChanged(function(state)
    if state then
        sendGoldenEggToBank()
        player.Backpack.ChildAdded:Connect(onBackpackChildAdded)
    end
end)
-- ‚úÖ Auto ItemBank: Azael Horn (‡πÅ‡∏ó‡πá‡∏ö Storage)
local AutoBankAzaelHornToggle = Tabs.Storage:AddToggle("AutoBankAzaelHorn", {
    Title = "Auto ItemBank: Azael Horn",
    Default = false
})

local AzaelHornBankSlotDropdown = Tabs.Storage:AddDropdown("AzaelHornBankSlot", {
    Title = "Keep To Storage Azael Horn",
    Values = {"1", "2", "3", "4", "5", "6"},
    Multi = false,
    Default = "1"
})

local selectedAzaelHornSlot = "1"
AzaelHornBankSlotDropdown:OnChanged(function(value)
    selectedAzaelHornSlot = value
end)

local storedAzaelHorns = {}

local function sendAzaelHornToBank()
    local backpack = player:WaitForChild("Backpack")
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name == "Azael Horn" then
            if not storedAzaelHorns[tool] then
                player.Character.Humanoid:EquipTool(tool)
                task.wait(0.2)
                local success, err = pcall(function()
                    game:GetService("ReplicatedStorage"):WaitForChild("Main")
                        :WaitForChild("Shop"):WaitForChild("ItemBank"):FireServer(selectedAzaelHornSlot)
                end)
                if success then
                    print("‚úÖ Azael Horn ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ ItemBank ‡∏ä‡πà‡∏≠‡∏á " .. selectedAzaelHornSlot)
                    storedAzaelHorns[tool] = true
                else
                    warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á Azael Horn ‡πÑ‡∏î‡πâ: ", err)
                end
                break
            else
                print("‚úÖ Azael Horn ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô ItemBank")
            end
        end
    end
end

local function onBackpackAddAzaelHorn(child)
    if AutoBankAzaelHornToggle.Value and child:IsA("Tool") and child.Name == "Azael Horn" then
        task.wait(0.5)
        sendAzaelHornToBank()
    end
end

AutoBankAzaelHornToggle:OnChanged(function(state)
    if state then
        sendAzaelHornToBank()
        player.Backpack.ChildAdded:Connect(onBackpackAddAzaelHorn)
    end
end)
-- ‚úÖ Auto ItemBank: Magic Stick (‡πÅ‡∏ó‡πá‡∏ö Storage)
local AutoBankMagicStickToggle = Tabs.Storage:AddToggle("AutoBankMagicStick", {
    Title = "Auto ItemBank: Magic Stick",
    Default = false
})

local MagicStickBankSlotDropdown = Tabs.Storage:AddDropdown("MagicStickBankSlot", {
    Title = "Keep To Storage Magic Stick",
    Values = {"1", "2", "3", "4", "5", "6"},
    Multi = false,
    Default = "1"
})

local selectedMagicStickSlot = "1"
MagicStickBankSlotDropdown:OnChanged(function(value)
    selectedMagicStickSlot = value
end)

local storedMagicSticks = {}

local function sendMagicStickToBank()
    local backpack = player:WaitForChild("Backpack")
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name == "Magic Stick" then
            if not storedMagicSticks[tool] then
                player.Character.Humanoid:EquipTool(tool)
                task.wait(0.2)
                local success, err = pcall(function()
                    game:GetService("ReplicatedStorage"):WaitForChild("Main")
                        :WaitForChild("Shop"):WaitForChild("ItemBank"):FireServer(selectedMagicStickSlot)
                end)
                if success then
                    print("‚úÖ Magic Stick ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ ItemBank ‡∏ä‡πà‡∏≠‡∏á " .. selectedMagicStickSlot)
                    storedMagicSticks[tool] = true
                else
                    warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á Magic Stick ‡πÑ‡∏î‡πâ: ", err)
                end
                break
            else
                print("‚úÖ Magic Stick ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô ItemBank")
            end
        end
    end
end

local function onBackpackAddMagicStick(child)
    if AutoBankMagicStickToggle.Value and child:IsA("Tool") and child.Name == "Magic Stick" then
        task.wait(0.5)
        sendMagicStickToBank()
    end
end

AutoBankMagicStickToggle:OnChanged(function(state)
    if state then
        sendMagicStickToBank()
        player.Backpack.ChildAdded:Connect(onBackpackAddMagicStick)
    end
end)



-- ‚úÖ Fluent Settings & Save
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "Script Loaded!",
    Duration = 6
})
SaveManager:LoadAutoloadConfig()

-- ‚úÖ Anti-AFK
local VirtualUser = game:GetService("VirtualUser")
Players.LocalPlayer.Idled:Connect(function()
    VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- üîç ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
local function getStatValue(folderName, statName)
    local folder = player:FindFirstChild(folderName)
    if folder and folder:FindFirstChild(statName) then
        return tostring(folder[statName].Value)
    end
    return "N/A"
end

-- üì¶ Paragraphs GUI
local displayNameParagraph = Tabs.User:AddParagraph({
    Title = "Display Name",
    Content = player.DisplayName
})

local standParagraph = Tabs.User:AddParagraph({
    Title = "Current Stand",
    Content = getStatValue("Data", "Stand")
})

local traitParagraph = Tabs.User:AddParagraph({
    Title = "Current Trait",
    Content = getStatValue("Stats", "Trait")
})

-- üîÅ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô GUI
local function refreshUserInfo()
    standParagraph:SetContent(getStatValue("Data", "Stand"))
    traitParagraph:SetContent(getStatValue("Stats", "Trait"))
end

-- üîÅ ‡∏ú‡∏π‡∏Å listener ‡∏Å‡∏±‡∏ö Trait / Stand ‡πÉ‡∏´‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà Reset)
local function listenToChanges()
    local data = player:WaitForChild("Data", 5)
    local stats = player:WaitForChild("Stats", 5)

    if data and data:FindFirstChild("Stand") then
        data.Stand:GetPropertyChangedSignal("Value"):Connect(refreshUserInfo)
    end

    if stats and stats:FindFirstChild("Trait") then
        stats.Trait:GetPropertyChangedSignal("Value"):Connect(refreshUserInfo)
    end
end

-- üß† ‡∏ü‡∏±‡∏á Event ‡∏ï‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
player.CharacterAdded:Connect(function()
    task.wait(1) -- ‡∏£‡∏≠‡πÉ‡∏´‡πâ Data / Stats ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
    refreshUserInfo()
    listenToChanges()
end)

-- üß† ‡∏ü‡∏±‡∏á‡∏ï‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å Reset ‡∏î‡πâ‡∏ß‡∏¢ Reset_Me
ReplicatedStorage:WaitForChild("Reset_Me").OnClientInvoke = function()
    task.delay(1, function()
        refreshUserInfo()
        listenToChanges()
    end)
end

-- ‚ñ∂Ô∏è ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
task.delay(1, function()
    refreshUserInfo()
    listenToChanges()
end)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = game.Players.LocalPlayer
local QuestRemote = ReplicatedStorage:WaitForChild("Main"):WaitForChild("Shop"):WaitForChild("Quest")
local QuestStatus = player:WaitForChild("Stats"):WaitForChild("Quest")

local questName = "Turtle"
local cooldownTime = 60 -- ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
local lastCompleteTime = 0

local function AcceptQuest(questName)
    QuestRemote:FireServer(questName)
    print("‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™:", questName)
end

local function CompleteQuest(questName)
    QuestRemote:FireServer(questName, true)
    print("‡∏™‡πà‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™:", questName)
    lastCompleteTime = tick() -- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™
end

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á Toggle ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö Quest ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Auto Quest ‡πÑ‡∏î‡πâ
local AutoQuestToggle = Tabs.Quest:AddToggle("AutoQuest", {
    Title = "Auto Quest: Turtle",
    Default = false
})

local autoQuestConnection = nil

AutoQuestToggle:OnChanged(function(enabled)
    if enabled then
        autoQuestConnection = game:GetService("RunService").Heartbeat:Connect(function()
            if QuestStatus.Value ~= questName then
                if tick() - lastCompleteTime >= cooldownTime then
                    AcceptQuest(questName)
                end
            else
                CompleteQuest(questName)
            end
        end)
    else
        if autoQuestConnection then
            autoQuestConnection:Disconnect()
            autoQuestConnection = nil
        end
    end
end)
-- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Toggle ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö Quest
local AutoQuestLetterToggle = Tabs.Quest:AddToggle("AutoQuestLetter", {
    Title = "Auto Quest: Letter",
    Default = false,
})

-- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ Toggle
AutoQuestLetterToggle:OnChanged(function(value)
    AutoLetter = value
end)

-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏ß‡∏™ Letter ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
local QUEST_NAME = "Letter"
local COOLDOWN_TIME = 150 -- 2 ‡∏ô‡∏≤‡∏ó‡∏µ 30 ‡∏ß‡∏¥
local lastQuestTime = 0

task.spawn(function()
    while task.wait(1) do
        if AutoLetter and (tick() - lastQuestTime) >= COOLDOWN_TIME then
            -- ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™
            local args = { QUEST_NAME, false }
            game:GetService("ReplicatedStorage"):WaitForChild("Main"):WaitForChild("Shop"):WaitForChild("Quest"):FireServer(unpack(args))
            task.wait(0.5)
            
            -- ‡∏™‡πà‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™
            game:GetService("ReplicatedStorage"):WaitForChild("Main"):WaitForChild("Shop"):WaitForChild("Quest"):FireServer()
            
            -- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
            lastQuestTime = tick()
        end
    end
end)
-- üîÅ ‡πÄ‡∏û‡∏¥‡πà‡∏° Toggle Auto Quest: Gucci ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö Quest
local AutoQuestGucciToggle = Tabs.Quest:AddToggle("AutoQuestGucci", {
    Title = "Auto Quest: Gucci (Beta)",
    Default = false
})

-- ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏ß‡∏™‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ Cooldown (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô)
local gucciQuestName = "Gucci"
local gucciCooldownTime = 180 -- ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏° cooldown ‡∏à‡∏£‡∏¥‡∏á)
local lastGucciCompleteTime = 0

-- üîÑ ‡∏£‡∏∞‡∏ö‡∏ö Auto Quest ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gucci
local autoQuestGucciConnection = nil

AutoQuestGucciToggle:OnChanged(function(enabled)
    if enabled then
        autoQuestGucciConnection = game:GetService("RunService").Heartbeat:Connect(function()
            if QuestStatus.Value ~= gucciQuestName then
                if tick() - lastGucciCompleteTime >= gucciCooldownTime then
                    QuestRemote:FireServer(gucciQuestName)
                    print("‚úÖ ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™: Gucci")
                end
            else
                QuestRemote:FireServer(gucciQuestName, true)
                print("‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™: Gucci")
                lastGucciCompleteTime = tick()
            end
        end)
    else
        if autoQuestGucciConnection then
            autoQuestGucciConnection:Disconnect()
            autoQuestGucciConnection = nil
        end
    end
end)
local AutoUseVeryBigMoneyStackToggle = Tabs.Mics:AddToggle("AutoUseVeryBigMoneyStack", {
    Title = "Auto Use: Very Big Money Stack",
    Default = false
})

AutoUseVeryBigMoneyStackToggle:OnChanged(function(state)
    if state then
        autoUseConnection = RunService.Heartbeat:Connect(function()
            useItem("Very Big Money Stack")
        end)
    elseif autoUseConnection then
        autoUseConnection:Disconnect()
        autoUseConnection = nil
    end
end)
local originalWait = wait
local g -- ‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πá‡∏ö hookfunction ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
local hooked = false

Tabs.Main:AddToggle("FastWait", {
    Title = "No Cooldown (Patch)",
    Default = false,
}):OnChanged(function(state)
    if state then
        if not hooked then
            g = hookfunction(wait, function(seconds)
                return g(0)
            end)
            hooked = true
        end
    else
        if hooked then
            if g then
            end
            getfenv().wait = originalWait

            hooked = false
        end
    end
end)
local MicsSection = Tabs.Mics:AddSection("Trait System")

local AutoTraitEnabled = false
local SelectedTraits = {}

-- ‚úÖ Toggle ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Auto Trait
MicsSection:AddToggle("AutoTrait", {
    Title = "Auto Trait",
    Default = false,
    Callback = function(state)
        AutoTraitEnabled = state
    end
})

-- ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Trait ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
local AllTraits = {
    "Legendary", "Prime", "Valiant", "Tank", "Inspiring",
    "Tough", "Humble", "Resilient", "Base", "Slim",
    "Sensitive", "Paranoid"
}

-- ‚úÖ Checkbox ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Trait ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
for _, trait in ipairs(AllTraits) do
    MicsSection:AddToggle("TraitSelect_" .. trait, {
        Title = "Target: " .. trait,
        Default = false,
        Callback = function(state)
            SelectedTraits[trait] = state
        end
    })
end

-- ‚úÖ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏∏‡πà‡∏° Trait ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
task.spawn(function()
    while true do
        task.wait(0.5)
        if AutoTraitEnabled then
            local currentTrait = tostring(game.Players.LocalPlayer:WaitForChild("Stats"):WaitForChild("Trait").Value)
            if not SelectedTraits[currentTrait] then
                game:GetService("ReplicatedStorage"):WaitForChild("Main"):WaitForChild("Shop"):WaitForChild("ChangeTrait"):FireServer()
            end
        end
    end
end)
